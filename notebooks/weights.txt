[array([[ 0.02159118, -0.03708025,  0.02175709, ...,  0.01625484,
          0.00041971,  0.02863875],
        [ 0.01447688,  0.0352992 , -0.00517068, ..., -0.02276227,
          0.04128621,  0.00561474],
        [ 0.03069551, -0.03502297, -0.02047215, ...,  0.05021295,
         -0.00238597,  0.01401411],
        ...,
        [-0.04026152, -0.02926151, -0.05888964, ...,  0.016756  ,
         -0.04603302,  0.01574583],
        [-0.03601051, -0.01997187, -0.04757863, ...,  0.01716915,
         -0.0012588 ,  0.0350045 ],
        [-0.04630142, -0.01822228, -0.02835543, ...,  0.01916223,
          0.05212778, -0.0601475 ]], dtype=float32),
 array([-1.0000000e+09, -5.0926247e+00, -3.9654853e+00, -3.5536354e+00,
        -5.0170784e+00, -4.0625396e+00, -4.9472837e+00, -4.8465137e+00,
        -4.1717310e+00, -6.8544130e+00, -2.9188249e+00, -5.6867819e+00,
        -3.4550395e+00, -2.6178484e+00, -6.0316825e+00, -3.1897073e+00,
        -5.1803851e+00, -4.1789093e+00, -3.4614277e+00, -4.2192812e+00,
        -3.8882189e+00, -4.4792051e+00, -4.9608130e+00, -5.5495973e+00,
        -4.8822250e+00, -4.4337449e+00, -3.7863445e+00, -3.9440010e+00,
        -6.1849031e+00, -7.3832541e+00, -5.4803991e+00, -6.5403428e+00,
        -4.9469199e+00, -7.3931627e+00, -6.0201678e+00, -6.5963187e+00,
        -5.5235357e+00, -4.7616301e+00, -4.1472540e+00, -5.6109939e+00,
        -4.3970351e+00, -5.3216047e+00, -6.4630928e+00, -4.8044181e+00,
        -5.1614199e+00, -4.4162478e+00, -6.5457273e+00, -4.5922933e+00,
        -4.1236577e+00, -7.6717553e+00, -4.9715548e+00, -6.3037386e+00,
        -5.8652158e+00, -5.6310654e+00, -4.5074210e+00, -6.3346972e+00,
        -4.5343790e+00, -7.9337616e+00, -5.8082495e+00, -5.4586415e+00,
        -5.3475327e+00, -3.9095066e+00, -4.3103681e+00, -7.6207881e+00,
        -5.6389894e+00, -8.8258190e+00, -4.0167370e+00, -5.0638819e+00,
        -4.8862362e+00, -5.2381549e+00, -6.9244790e+00, -6.4535871e+00,
        -5.2091665e+00, -6.6326380e+00, -8.6431570e+00, -5.0145783e+00,
        -7.2994537e+00, -4.7563324e+00, -7.2666430e+00, -4.9983101e+00,
        -4.1725292e+00, -4.8451014e+00, -5.2052598e+00, -5.2585902e+00,
        -4.4390659e+00, -4.5554333e+00, -4.6265502e+00, -4.5141330e+00,
        -5.3881855e+00, -8.1686239e+00, -3.3862617e+00, -5.1076031e+00,
        -7.2712941e+00, -3.9757683e+00, -5.0817075e+00, -4.5587311e+00,
        -5.1926737e+00, -6.4156165e+00, -6.2470098e+00, -3.9854653e+00,
        -5.2234664e+00, -5.1263251e+00, -6.1074338e+00, -4.3382039e+00,
        -4.0062246e+00], dtype=float32)]


            x = self.conv1(x)
    x = self.conv2(x)
    x = self.maxpool1(x)
    x = self.norm1(x)

    x = self.flatten(x)

        self.conv1 = tf.keras.layers.Conv1D(filters=32, kernel_size=8)
    self.conv2 = tf.keras.layers.Conv1D(filters=32, kernel_size=4)
    self.maxpool1 = tf.keras.layers.MaxPool1D(32)